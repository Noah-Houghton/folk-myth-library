{"version":3,"sources":["logo.svg","Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","this","props","data","className","map","val","idx","key","Title","class","React","Component","App","state","loading","allBooks","filteredBooks","searchTerm","filters","setState","csv","then","response","forEach","item","Object","keys","trim","potentialArray","split","length","books","loadBooks","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,kC,8OCwB5BC,G,uLAnBX,OAAKC,KAAKC,MAAMC,KAQd,yBAAKC,UAAU,SACb,4BACGH,KAAKC,MAAMC,KAAKE,KAAI,SAACC,EAAKC,GACzB,OAAO,wBAAIC,IAAKD,GAAMD,EAAIG,YAT9B,yBAAKC,MAAM,SACT,8C,GALUC,IAAMC,YCqDXC,E,YA7Bb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KACDY,MAAQ,CACXC,SAAS,EACTC,SAAU,GACVC,cAAe,GACfC,WAAY,GACZC,QAAS,IAPM,E,yEAnBN,IAAD,OACVlB,KAAKmB,SAAS,CAAEL,SAAS,IACXM,YACZ,oKAEMC,MAAK,SAAAC,GACX,IAAIpB,EAAOoB,EACXpB,EAAKqB,SAAQ,SAAAC,GACXC,OAAOC,KAAKF,GAAMD,SAAQ,SAAAhB,GACxBiB,EAAKjB,GAAOiB,EAAKjB,GAAKoB,OACtB,IAAIC,EAAiBJ,EAAKjB,GAAKsB,MAAM,KACrCL,EAAKjB,GAAOqB,EAAeE,OAAS,EAAIF,EAAiBJ,EAAKjB,MAEhEiB,EAAK,qBAAuBA,EAAK,oBACjCA,EAAK,mBAAqBA,EAAK,qBAEjC,EAAKL,SAAS,CAAEH,cAAed,EAAMa,SAAUb,EAAMY,SAAS,W,yDAchEd,KAAKmB,SAAS,CAAEY,MAAO/B,KAAKgC,gB,+BAG5B,IAAMD,EAAQ/B,KAAKa,MAAMG,cACzB,OACE,yBAAKb,UAAU,OACb,4BAAQA,UAAU,cAChB,kEACA,yBAAK8B,IAAKC,IAAM/B,UAAU,WAAWgC,IAAI,SACzC,kEACA,0DAEF,kBAAC,EAAD,CAAOjC,KAAM6B,S,GA3CHrB,IAAMC,WCKJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.cf04c027.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nclass Table extends React.Component {\r\n  render() {\r\n    if (!this.props.data) {\r\n      return (\r\n        <div class=\"Table\">\r\n          <p>Loading...</p>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"Table\">\r\n        <ul>\r\n          {this.props.data.map((val, idx) => {\r\n            return <li key={idx}>{val.Title}</li>;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { csv } from \"d3-fetch\";\n\nimport Table from \"./Table.js\";\n\nclass App extends React.Component {\n  loadBooks() {\n    this.setState({ loading: true });\n    let promise = csv(\n      \"https://docs.google.com/spreadsheets/d/e/2PACX-1vT2v2Ka1L9i28QBUQq_-GgZtcHO6UGHw6M5Po7GxGd5Iczn0dyhhIJMFO82PbZUWpd9xjqx4wzhCoEF/pub?gid=0&single=true&output=csv\"\n    );\n    promise.then(response => {\n      let data = response;\n      data.forEach(item => {\n        Object.keys(item).forEach(key => {\n          item[key] = item[key].trim();\n          let potentialArray = item[key].split(\",\");\n          item[key] = potentialArray.length > 1 ? potentialArray : item[key];\n        });\n        item[\"Number of Copies\"] = +item[\"Number of Copies\"];\n        item[\"Year Published\"] = +item[\"Year Published\"];\n      });\n      this.setState({ filteredBooks: data, allBooks: data, loading: false });\n    });\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      allBooks: [],\n      filteredBooks: [],\n      searchTerm: \"\",\n      filters: [],\n    };\n  }\n  componentDidMount() {\n    this.setState({ books: this.loadBooks() });\n  }\n  render() {\n    const books = this.state.filteredBooks;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>The Folklore and Mythology Library</h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>\"To Vincent, Who Shared the Quest\"</h2>\n          <p>&mdash; Esther Casier-Quinn</p>\n        </header>\n        <Table data={books} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}