{"version":3,"sources":["logo.svg","utils.ts","SimpleTable.tsx","FilterField.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","arrayContainsPartialString","arr","str","contains","a","includes","useStyles","makeStyles","table","minWidth","bookToRow","book","TableRow","TableCell","Title","Author","Shelf","Publisher","Translator","Volume","Region","Type","Published","Copies","Tags","Language","Editor","SimpleTable","props","classes","data","length","clickHandler","rows","push","TableContainer","component","Paper","Table","className","aria-label","TableHead","onClick","key","TableBody","FilterField","placeholder","id","type","App","state","loading","allBooks","filteredBooks","searchTerm","filters","ascending","$","val","this","setState","filter","csv","then","response","books","forEach","item","trim","split","map","author","tag","editor","filterBooks","loadBooks","column","sort","b","src","logo","alt","sortByColumn","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d76e309.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function arrayContainsPartialString(arr: string[], str: string) {\r\n  let contains = false;\r\n  for (let a of arr) {\r\n    contains = contains || a.includes(str);\r\n  }\r\n  return contains;\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport \"./SimpleTable.css\";\r\n\r\nimport { Book } from \"./Types\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction header(clickHandler: filterClickHandler) {\r\n  return (\r\n    <TableRow className=\"header\" key=\"Columns\">\r\n      <TableCell onClick={clickHandler(\"Title\")}>Title</TableCell>\r\n      <TableCell onClick={clickHandler(\"Author\")}>Author</TableCell>\r\n      <TableCell onClick={clickHandler(\"Shelf\")}>Shelf</TableCell>\r\n      <TableCell onClick={clickHandler(\"Publisher\")}>Publisher</TableCell>\r\n      <TableCell onClick={clickHandler(\"Translator\")}>Translator</TableCell>\r\n      <TableCell onClick={clickHandler(\"Volume\")}>Volume</TableCell>\r\n      <TableCell onClick={clickHandler(\"Region\")}>Region</TableCell>\r\n      <TableCell onClick={clickHandler(\"Type\")}>Type</TableCell>\r\n      <TableCell onClick={clickHandler(\"Published\")}>Published</TableCell>\r\n      <TableCell onClick={clickHandler(\"Copies\")}>Copies</TableCell>\r\n      <TableCell onClick={clickHandler(\"Tags\")}>Tags</TableCell>\r\n      <TableCell onClick={clickHandler(\"Language\")}>Language</TableCell>\r\n      <TableCell onClick={clickHandler(\"Editor\")}>Editor</TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nfunction bookToRow(book: Book) {\r\n  return (\r\n    <TableRow>\r\n      <TableCell>{book.Title}</TableCell>\r\n      <TableCell>{book.Author}</TableCell>\r\n      <TableCell>{book.Shelf}</TableCell>\r\n      <TableCell>{book.Publisher}</TableCell>\r\n      <TableCell>{book.Translator}</TableCell>\r\n      <TableCell>{book.Volume}</TableCell>\r\n      <TableCell>{book.Region}</TableCell>\r\n      <TableCell>{book.Type}</TableCell>\r\n      <TableCell>{book.Published}</TableCell>\r\n      <TableCell>{book.Copies}</TableCell>\r\n      <TableCell>{book.Tags}</TableCell>\r\n      <TableCell>{book.Language}</TableCell>\r\n      <TableCell>{book.Editor}</TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n\r\ntype filterClickHandler = (key: keyof Book) => any;\r\n\r\nexport function SimpleTable(props: {\r\n  data: Book[];\r\n  onClick: filterClickHandler;\r\n}) {\r\n  const classes = useStyles();\r\n  if (props.data.length === 0) {\r\n    return <p>Loading...</p>;\r\n  }\r\n  const rows = [];\r\n  for (let book of props.data) {\r\n    rows.push(bookToRow(book));\r\n  }\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>{header(props.onClick)}</TableHead>\r\n        <TableBody>{rows}</TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./FilterField.css\";\r\nexport function FilterField(props: { onClick: () => void }) {\r\n  return (\r\n    <div className=\"filter\">\r\n      <input\r\n        placeholder=\"Enter a term to filter the library\"\r\n        id=\"searchTerm\"\r\n        type=\"text\"\r\n      ></input>\r\n      <button onClick={props.onClick}>Filter</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { csv } from \"d3-fetch\";\nimport $ from \"jquery\";\n\nimport { arrayContainsPartialString } from \"./utils\";\n\nimport { LibraryState, Book, RawBookData } from \"./Types\";\n\nimport { SimpleTable } from \"./SimpleTable\";\nimport { FilterField } from \"./FilterField\";\n\nclass App extends React.Component<{}, LibraryState> {\n  filterBooks() {\n    const searchTerm = ($(\"#searchTerm\").val() || \"\") as string;\n    this.setState({\n      filteredBooks: this.state.allBooks.filter((book: Book) => {\n        return searchTerm !== \"\"\n          ? book.Title.includes(searchTerm) ||\n              arrayContainsPartialString(book.Author, searchTerm) ||\n              arrayContainsPartialString(book.Editor, searchTerm) ||\n              arrayContainsPartialString(book.Tags, searchTerm)\n          : this.state.allBooks;\n      }),\n      searchTerm,\n      filters: this.state.filters,\n    } as LibraryState);\n  }\n  loadBooks() {\n    this.setState({ loading: true });\n    let promise = csv(\n      \"https://docs.google.com/spreadsheets/d/e/2PACX-1vT2v2Ka1L9i28QBUQq_-GgZtcHO6UGHw6M5Po7GxGd5Iczn0dyhhIJMFO82PbZUWpd9xjqx4wzhCoEF/pub?gid=0&single=true&output=csv\"\n    );\n    promise.then(response => {\n      let bookData = (response as unknown) as RawBookData[];\n      let books: Book[] = [];\n      bookData.forEach((item: RawBookData) => {\n        let book: Book = {\n          Title: item.Title.trim(),\n          Author: item.Author.split(\",\").map((author: string) => author.trim()),\n          Shelf: item.Shelf.trim(),\n          Publisher: item.Publisher.trim(),\n          Translator: item.Translator.trim(),\n          Volume: +item.Volume,\n          Region: item.Region.trim(),\n          Type: item.Type.trim(),\n          Published: +item.Published,\n          Copies: +item.Copies,\n          Tags: item.Tags.split(\",\").map((tag: string) => tag.trim()),\n          Language: item.Language.trim(),\n          Editor: item.Editor.split(\",\").map((editor: string) => editor.trim()),\n        };\n        books.push(book);\n      });\n      this.setState({ allBooks: books, loading: false });\n      this.filterBooks();\n    });\n  }\n  constructor(props: Object) {\n    super(props);\n    this.state = {\n      loading: true,\n      allBooks: [],\n      filteredBooks: [],\n      searchTerm: \"\",\n      filters: null,\n      ascending: true,\n    };\n  }\n  componentDidMount() {\n    this.loadBooks();\n  }\n  sortByColumn(column: keyof Book) {\n    return () => {\n      this.setState({\n        filteredBooks: this.state.filteredBooks.sort((a: Book, b: Book) => {\n          return (this.state.ascending\n          ? a[column] < b[column]\n          : a[column] > b[column])\n            ? 1\n            : -1;\n        }),\n        ascending: !this.state.ascending,\n      });\n    };\n  }\n  render() {\n    const books = this.state.filteredBooks;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>The Folklore and Mythology Library</h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>\"To Vincent, Who Shared the Quest\"</h2>\n          <p>&mdash; Esther Casier-Quinn</p>\n        </header>\n        <FilterField onClick={this.filterBooks} />\n        <SimpleTable onClick={this.sortByColumn.bind(this)} data={books} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}