{"version":3,"sources":["react-logo.svg","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","App","props","tableRef","scrollToTable","window","scrollTo","current","offsetTop","state","loading","allBooks","React","createRef","this","setState","csv","then","response","books","forEach","item","book","Title","trim","Author","split","map","author","Shelf","Publisher","Translator","Volume","Region","Type","Published","Copies","Tags","tag","Language","Editor","editor","push","loadBooks","arr","ret","substr","length","cols","field","title","render","rowData","renderArray","className","src","logo","alt","id","fontSize","onClick","ref","columns","data","Component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,wC,wRCqH5BC,E,YA3Eb,WAAYC,GAAgB,IAAD,8BACzB,4CAAMA,KA/BRC,cA8B2B,IAW3BC,cAAgB,WACdC,OAAOC,SAAS,EAAG,EAAKH,SAASI,QAAQC,YAVzC,EAAKC,MAAQ,CACXC,SAAS,EACTC,SAAU,IAEZ,EAAKR,SAAWS,IAAMC,YANG,E,yEA7Bd,IAAD,OACVC,KAAKC,SAAS,CAAEL,SAAS,IACXM,YACZ,oKAEMC,MAAK,SAAAC,GACX,IACIC,EAAgB,GADJD,EAEPE,SAAQ,SAACC,GAChB,IAAIC,EAAa,CACfC,MAAOF,EAAKE,MAAMC,OAClBC,OAAQJ,EAAKI,OAAOC,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAoBA,EAAOJ,UAC9DK,MAAOR,EAAKQ,MAAML,OAClBM,UAAWT,EAAKS,UAAUN,OAC1BO,WAAYV,EAAKU,WAAWP,OAC5BQ,QAASX,EAAKW,OACdC,OAAQZ,EAAKY,OAAOT,OACpBU,KAAMb,EAAKa,KAAKV,OAChBW,WAAYd,EAAKc,UACjBC,QAASf,EAAKe,OACdC,KAAMhB,EAAKgB,KAAKX,MAAM,KAAKC,KAAI,SAACW,GAAD,OAAiBA,EAAId,UACpDe,SAAUlB,EAAKkB,SAASf,OACxBgB,OAAQnB,EAAKmB,OAAOd,MAAM,KAAKC,KAAI,SAACc,GAAD,OAAoBA,EAAOjB,WAEhEL,EAAMuB,KAAKpB,MAEb,EAAKP,SAAS,CAAEJ,SAAUQ,EAAOT,SAAS,W,yDAY5CI,KAAK6B,c,kCAKKC,GACV,IAAIC,EAAM,GADe,uBAEzB,YAAcD,EAAd,+CAAmB,CACjBC,GADiB,QACN,MAHY,kFAMzB,OADAA,EAAMA,EAAIC,OAAO,EAAGD,EAAIE,OAAS,K,+BAGzB,IAAD,OACD5B,EAAQL,KAAKL,MAAME,SACrBqC,EAAO,CACT,CAAEC,MAAO,QAASC,MAAO,SACzB,CACED,MAAO,SACPC,MAAO,YACPC,OAAQ,SAACC,GAAD,OAAmB,EAAKC,YAAYD,EAAQ3B,UAEtD,CAAEwB,MAAO,QAASC,MAAO,kBACzB,CAAED,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,SAAUC,MAAO,eAC1B,CACED,MAAO,OACPC,MAAO,OACPC,OAAQ,SAACC,GAAD,OAAmB,EAAKC,YAAYD,EAAQf,QAEtD,CAAEY,MAAO,WAAYC,MAAO,YAC5B,CACED,MAAO,SACPC,MAAO,YACPC,OAAQ,SAACC,GAAD,OAAmB,EAAKC,YAAYD,EAAQf,SAGxD,OACE,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,kEACA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kEACA,yDACA,kBAAC,IAAD,CACEC,GAAG,YACHC,SAAS,QACTC,QAAS9C,KAAKV,iBAGlB,yBAAKyD,IAAK/C,KAAKX,WACf,kBAAC,IAAD,CACE2D,QAASd,EACTe,KAAM5C,EACN+B,MAAM,wC,GAnGEtC,IAAMoD,WCCJC,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OAAO,kBAAC,EAAD,MAASmB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,MAAK,SAAA0D,GACjCA,EAAaC,kB","file":"static/js/main.ba9f5a6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./react-logo.svg\";\nimport \"./App.css\";\nimport { csv } from \"d3-fetch\";\n// import $ from \"jquery\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport MaterialTable from \"material-table\";\nimport { LibraryState, Book, RawBookData } from \"./Types\";\n\nclass App extends React.Component<{}, LibraryState> {\n  tableRef: any;\n  loadBooks() {\n    this.setState({ loading: true });\n    let promise = csv(\n      \"https://docs.google.com/spreadsheets/d/e/2PACX-1vT2v2Ka1L9i28QBUQq_-GgZtcHO6UGHw6M5Po7GxGd5Iczn0dyhhIJMFO82PbZUWpd9xjqx4wzhCoEF/pub?gid=0&single=true&output=csv\"\n    );\n    promise.then(response => {\n      let bookData = (response as unknown) as RawBookData[];\n      let books: Book[] = [];\n      bookData.forEach((item: RawBookData) => {\n        let book: Book = {\n          Title: item.Title.trim(),\n          Author: item.Author.split(\",\").map((author: string) => author.trim()),\n          Shelf: item.Shelf.trim(),\n          Publisher: item.Publisher.trim(),\n          Translator: item.Translator.trim(),\n          Volume: +item.Volume,\n          Region: item.Region.trim(),\n          Type: item.Type.trim(),\n          Published: +item.Published,\n          Copies: +item.Copies,\n          Tags: item.Tags.split(\",\").map((tag: string) => tag.trim()),\n          Language: item.Language.trim(),\n          Editor: item.Editor.split(\",\").map((editor: string) => editor.trim()),\n        };\n        books.push(book);\n      });\n      this.setState({ allBooks: books, loading: false });\n    });\n  }\n  constructor(props: Object) {\n    super(props);\n    this.state = {\n      loading: true,\n      allBooks: [],\n    };\n    this.tableRef = React.createRef<HTMLDivElement>();\n  }\n  componentDidMount() {\n    this.loadBooks();\n  }\n  scrollToTable = () => {\n    window.scrollTo(0, this.tableRef.current.offsetTop);\n  };\n  renderArray(arr: string[]) {\n    let ret = \"\";\n    for (let a of arr) {\n      ret += a + \", \";\n    }\n    ret = ret.substr(0, ret.length - 2);\n    return ret;\n  }\n  render() {\n    const books = this.state.allBooks;\n    let cols = [\n      { field: \"Title\", title: \"Title\" },\n      {\n        field: \"Author\",\n        title: \"Author(s)\",\n        render: (rowData: Book) => this.renderArray(rowData.Author),\n      },\n      { field: \"Shelf\", title: \"Shelf Location\" },\n      { field: \"Publisher\", title: \"Publisher\" },\n      { field: \"Translator\", title: \"Translator\" },\n      { field: \"Volume\", title: \"Volume\" },\n      { field: \"Region\", title: \"Region\" },\n      { field: \"Type\", title: \"Type\" },\n      { field: \"Published\", title: \"Published\" },\n      { field: \"Copies\", title: \"# of Copies\" },\n      {\n        field: \"Tags\",\n        title: \"Tags\",\n        render: (rowData: Book) => this.renderArray(rowData.Tags),\n      },\n      { field: \"Language\", title: \"Language\" },\n      {\n        field: \"Editor\",\n        title: \"Editor(s)\",\n        render: (rowData: Book) => this.renderArray(rowData.Tags),\n      },\n    ];\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>The Folklore and Mythology Library</h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>\"To Vincent, Who Shared the Quest\"</h2>\n          <p>&mdash; Esther Casier-Quinn</p>\n          <ExpandMoreIcon\n            id=\"HomeArrow\"\n            fontSize=\"large\"\n            onClick={this.scrollToTable}\n          ></ExpandMoreIcon>\n        </header>\n        <div ref={this.tableRef}></div>\n        <MaterialTable\n          columns={cols}\n          data={books}\n          title=\"Folklore and Mythology Library\"\n        ></MaterialTable>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}